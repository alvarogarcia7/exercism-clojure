(use 'clojure.test)
(run-tests)
(run-all-tests)
(use 'bob-test)
(use 'clojure.test)
(run-all-tests)
(use 'bob-test)
o
(use 'bob-test)
(use bob-test)
(use 'bob-test)
(:require 'bob-test)
(run-all-tests)
(run-tests)
(run-all-tests bob-test)
(run-all-tests 'bob-test)
(run-all-tests #bob-test)
(run-all-tests #"bob-test")
(run-all-tests #"bob-testo")
filter #(= "?" %) "hello"
filter #(== "?" %) "hello"
(split-with "" "hello")
(split-with #"" "hello")
(split-with (-> %) "hello")
(split-with #(-> %) "hello")
(clojure-string/split "" "hello")
(clojure.string/split "" "hello")
(clojure.string/split #"" "hello")
(clojure.string/split "hello" #"")
(filter #(== "?" %) (clojure.string/split "hello" #""))
(filter #(= "?" %) (clojure.string/split "hello" #""))
(filter #(= "?" %) (clojure.string/split "hello?" #""))
(contains? #(= "?" %) (clojure.string/split "hello?" #""))
(contains? "?" (clojure.string/split "hello?" #""))
(contains? "?" "?")
(= 1 (filter "?" (clojure.string/split "hello?" #""))
)
(= 1 (filter #(= "?" %) (clojure.string/split "hello?" #""))
)
(>= 1 (filter #(= "?" %) (clojure.string/split "hello?" #"")))
(>= 1 (size (filter #(= "?" %) (clojure.string/split "hello?" #""))))
(>= 1 (count (filter #(= "?" %) (clojure.string/split "hello?" #""))))
(>= 1 (count (filter #(= "?" %) (clojure.string/split "hello" #""))))
(>= 1 (count (filter #(= "?" %) (clojure.string/split "hel" #""))))
(filter #(= "?" %) (clojure.string/split "hel" #""))
(count (filter #(= "?" %) (clojure.string/split "hel" #"")))
(<= 1 (count (filter #(= "?" %) (clojure.string/split "hel" #"")))
)
(<= 1 (count (filter #(= "?" %) (clojure.string/split "hel" #""))))
(<= 1 (count (filter #(= "?" %) (clojure.string/split "hel?" #""))))
(<= 1 (count (filter #(= "?" %) (clojure.string/split "hel??" #""))))
